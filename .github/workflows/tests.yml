name: tests

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:
  tests:
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-10.15, windows-2016]
      fail-fast: false
    concurrency: docker.ci.kluctl.io-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup TOOLS envs
        shell: bash
        run: |
          if [ "${{ runner.os }}" != "Windows" ]; then
            echo "SUDO=sudo" >> $GITHUB_ENV
          fi

          TOOLS_EXE=
          TOOLS_TARGET_DIR=$GITHUB_WORKSPACE/bin
          mkdir $TOOLS_TARGET_DIR

          if [ "${{ runner.os }}" == "macOS" ]; then
            TOOLS_OS=darwin
          elif [ "${{ runner.os }}" == "Windows" ]; then
            TOOLS_OS=windows
            TOOLS_EXE=.exe
          else
            TOOLS_OS=linux
          fi
          echo "TOOLS_OS=$TOOLS_OS" >> $GITHUB_ENV
          echo "TOOLS_EXE=$TOOLS_EXE" >> $GITHUB_ENV
          echo "TOOLS_TARGET_DIR=$TOOLS_TARGET_DIR" >> $GITHUB_ENV
          echo "$TOOLS_TARGET_DIR" >> $GITHUB_PATH
      - name: "[Windows] Install openssh"
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install openssh
      - name: Port-forward docker
        shell: bash
        run: |
          echo "${{ secrets.CI_SSH_KEY }}" > kluctl-ci.pem
          chmod og-rwx kluctl-ci.pem
          echo "Forwarding ports"

          # pre-create this to avoid races in the background ssh calls
          mkdir -p $HOME/.ssh

          # docker
          nohup /usr/bin/ssh -i kluctl-ci.pem -o StrictHostKeyChecking=no -L2375:/run/docker.sock -N kluctl-ci@docker.ci.kluctl.io &> ssh-log-2375 &

          # keep ports alive
          nohup bash -c "while true; do curl http://localhost:2375 &> /dev/null ; sleep 5; done" &

          echo "DOCKER_HOST=localhost:2375" >> $GITHUB_ENV
      # Enable tmate debugging of manually-triggered workflows if the input option was provided
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
        with:
          limit-access-to-actor: true
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.0
      - uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ matrix.os }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements-dev.txt') }}
      - name: Setup virtualenv
        shell: bash
        run: |
          if [ ! -d .venv ]; then
            pip install virtualenv
            virtualenv .venv
          fi
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "$GITHUB_WORKSPACE\\.venv\\Scripts" >> $GITHUB_PATH
          else
            echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH
          fi
      - name: Install kluctl and dependencies
        shell: bash
        run: |
          python ./setup.py develop
          pip install -r requirements-dev.txt
      - name: Create pyinstaller executable
        shell: bash
        run: |
          pyinstaller kluctl.spec
          OLD_KLUCTL=$(which kluctl)
          echo OLD_KLUCTL=$OLD_KLUCTL
          cp dist/* $TOOLS_TARGET_DIR
          which kluctl
          rm $OLD_KLUCTL
          which kluctl
      - name: Provide required tools versions
        shell: bash
        run: |
          echo "KUBECTL_VERSION=1.21.5" >> $GITHUB_ENV
          echo "KIND_VERSION=0.11.1" >> $GITHUB_ENV
          echo "KUSTOMIZE_VERSION=4.4.1" >> $GITHUB_ENV
          echo "HELM_VERSION=3.6.3" >> $GITHUB_ENV
          echo "KUBESEAL_VERSION=0.16.0" >> $GITHUB_ENV
          echo "DOCKER_VERSION=20.10.9" >> $GITHUB_ENV
      - name: Download required tools
        shell: bash
        run: |
          curl -L -o kubectl$TOOLS_EXE https://storage.googleapis.com/kubernetes-release/release/v$KUBECTL_VERSION/bin/${TOOLS_OS}/amd64/kubectl$TOOLS_EXE && \
              $SUDO mv kubectl$TOOLS_EXE "$TOOLS_TARGET_DIR/"
          curl -L -o kind$TOOLS_EXE https://github.com/kubernetes-sigs/kind/releases/download/v${KIND_VERSION}/kind-${TOOLS_OS}-amd64 && \
              $SUDO mv kind$TOOLS_EXE "$TOOLS_TARGET_DIR/"
          curl -L -o kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${KUSTOMIZE_VERSION}/kustomize_v${KUSTOMIZE_VERSION}_${TOOLS_OS}_amd64.tar.gz && \
              tar xzf kustomize.tar.gz && \
              $SUDO mv kustomize$TOOLS_EXE "$TOOLS_TARGET_DIR/"
          curl -L -o helm.tar.gz https://get.helm.sh/helm-v$HELM_VERSION-${TOOLS_OS}-amd64.tar.gz && \
              tar xzf helm.tar.gz && \
              $SUDO mv ${TOOLS_OS}-amd64/helm$TOOLS_EXE "$TOOLS_TARGET_DIR/"
          KUBESEAL_EXE=kubeseal-${TOOLS_OS}-amd64
          if [ "${{ runner.os }}" == "Windows" ]; then
            KUBESEAL_EXE=kubeseal.exe
          fi
          curl -L -o kubeseal$TOOLS_EXE https://github.com/bitnami-labs/sealed-secrets/releases/download/v$KUBESEAL_VERSION/$KUBESEAL_EXE && \
              $SUDO mv kubeseal$TOOLS_EXE "$TOOLS_TARGET_DIR/"
          if [ "${{ runner.os }}" == "macOS" ]; then
            curl -L -o docker.tar.gz https://download.docker.com/mac/static/stable/x86_64/docker-$DOCKER_VERSION.tgz
            tar xzf docker.tar.gz
            $SUDO mv docker/docker "$TOOLS_TARGET_DIR/"
            rm -rf docker
          elif [ "${{ runner.os }}" == "Windows" ]; then
            curl -L -o docker.zip https://download.docker.com/win/static/stable/x86_64/docker-$DOCKER_VERSION.zip
            unzip docker.zip
            mv docker/docker.exe "$TOOLS_TARGET_DIR/"
            rm -rf docker
          fi
          $SUDO chmod -R +x "$TOOLS_TARGET_DIR/"
      - name: Test required tools
        shell: bash
        run: |
          kubectl version || true
          kind version || true
          kustomize version || true
          helm version || true
          kubeseal --version || true
      - name: Start kind cluster
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            PORT=10000
          elif [ "${{ runner.os }}" == "Windows" ]; then
            PORT=10001
          else
            PORT=10002
          fi
          cat << EOF > kind-cluster.yml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          networking:
            apiServerAddress: "0.0.0.0"
            apiServerPort: $PORT
          EOF
          KIND_CLUSTER_NAME=$(echo "pytest-${{ runner.os }}" | awk '{{  print tolower($1)}}')
          echo "KIND_CLUSTER_NAME=$KIND_CLUSTER_NAME" >> $GITHUB_ENV

          export KUBECONFIG=$GITHUB_WORKSPACE/kind-kubeconfig
          kind delete cluster --name $KIND_CLUSTER_NAME || true
          kind create cluster --config kind-cluster.yml --name $KIND_CLUSTER_NAME

          # Rewrite cluster info to point to docker.ci.kluctl.io
          # This also fully disables TLS verification
          IP=$(nslookup docker.ci.kluctl.io | grep Address | tail -n1 | sed 's/Address://g' | awk '{print $1}')
          echo IP=$IP
          kubectl config view -ojson --raw \
            | jq ".clusters[0].cluster.\"insecure-skip-tls-verify\"=true" \
            | jq "del(.clusters[0].cluster.\"certificate-authority-data\")" \
            | jq ".clusters[0].cluster.server=\"https://$IP:$PORT\"" \
          > kind-kubeconfig2
          mv kind-kubeconfig2 kind-kubeconfig
      - name: Run tests
        shell: bash
        run: |
          TOOLS_TARGET_DIR=$(echo $TOOLS_TARGET_DIR | sed 's|\\|/|g')
          export PYTEST_ADDOPTS="--cluster-name=$KIND_CLUSTER_NAME --kubeconfig=kind-kubeconfig --kind-bin=$TOOLS_TARGET_DIR/kind$TOOLS_EXE --kind-kubectl-bin=$TOOLS_TARGET_DIR/kubectl$TOOLS_EXE --keep-cluster"
          pytest -n4
      - name: Delete kind cluster
        shell: bash
        run: |
          kind delete cluster --name $KIND_CLUSTER_NAME
  check-code:
    runs-on: ubuntu-latest
    steps:
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y git
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.0
      - name: pip install
        run: |
          pip install .
      - name: check-docs
        run: |
          python scripts/replace-commands-help.py
          if [ "$(git status --porcelain)" != "" ]; then
            echo "commands.md is not up-to-date. Run ./scripts/replace-commands-help.py to fix this!"
            exit 1
          fi
